{"ast":null,"code":"import { apiAdd, apiEdit, apiGetAll, apiGetOne, apiGetMy, apiDelete } from \"../../services/stand/standService\";\nimport { uploadImage } from \"../utils/imageUploadAction\";\nimport { FETCH_STAND, FAILED_STAND, RECEIVE_STAND, RECEIVE_ITEM_STAND } from \"../types\";\n\nconst fetch = () => {\n  return {\n    type: FETCH_STAND\n  };\n};\n\nconst receiveItem = (currentItem, meta = {}) => {\n  return {\n    type: RECEIVE_ITEM_STAND,\n    payload: {\n      currentItem,\n      meta\n    }\n  };\n};\n\nconst receive = (list, meta = {}) => {\n  return {\n    type: RECEIVE_STAND,\n    payload: {\n      list,\n      meta\n    }\n  };\n};\n\nconst failed = error => {\n  return {\n    type: FAILED_STAND,\n    payload: {\n      error: typeof error === 'object' ? error.message : error\n    }\n  };\n};\n\nconst add = (data, guard) => async dispatch => {\n  try {\n    dispatch(fetch());\n\n    if (data && data.owner && data.owner.image) {\n      data.owner.image = await dispatch(uploadImage('stand', data.owner.image));\n    }\n\n    const response = await apiAdd(data, guard);\n\n    if (response && response.success) {\n      dispatch(receive(response.data, response.meta));\n      return response;\n    }\n\n    dispatch(failed(response));\n    return response;\n  } catch (error) {\n    dispatch(failed(error));\n    return error;\n  }\n};\n\nconst edit = (id, data, guard) => async dispatch => {\n  try {\n    if (data && !data.imageRaw) {\n      data.image = await dispatch(uploadImage('stand', data.image));\n    }\n\n    const response = await apiEdit(id, data, guard);\n\n    if (response && response.success) {\n      dispatch(receiveItem(response.data, response.meta));\n\n      if (response) {\n        return response;\n      }\n    } else {\n      dispatch(failed(response));\n      return response;\n    }\n  } catch (error) {\n    dispatch(failed(error));\n    return error;\n  }\n};\n\nconst getAll = (data, guard) => async dispatch => {\n  try {\n    dispatch(fetch());\n    const response = await apiGetAll(data, guard);\n\n    if (response && response.success) {\n      dispatch(receive(response.data, response.meta));\n      return response;\n    }\n\n    dispatch(failed(response));\n    return response;\n  } catch (error) {\n    return dispatch(failed(error));\n  }\n};\n\nconst getOne = (id, guard) => async dispatch => {\n  try {\n    dispatch(fetch());\n    const response = await apiGetOne(id, guard);\n\n    if (response && response.success) {\n      dispatch(receiveItem(response.data));\n      return response;\n    }\n\n    dispatch(failed(response));\n    return response;\n  } catch (error) {\n    return dispatch(failed(error));\n  }\n};\n/*\n  type: all, member, owner\n*/\n\n\nconst getMy = (data, guard) => async dispatch => {\n  try {\n    dispatch(fetch());\n    const response = await apiGetMy(data, guard);\n\n    if (response && response.success) {\n      dispatch(receive(response.data, response.meta));\n      return response;\n    }\n\n    dispatch(failed(response));\n    return response;\n  } catch (error) {\n    return dispatch(failed(error));\n  }\n};\n\nconst deleteData = (id, guard) => async dispatch => {\n  try {\n    dispatch(fetch());\n    const response = await apiDelete(id, guard);\n\n    if (response && response.success) {\n      dispatch(receiveItem(response.data, response.meta));\n\n      if (response) {\n        return response;\n      }\n    } else {\n      dispatch(failed(response));\n      return response;\n    }\n  } catch (error) {\n    dispatch(failed(error));\n    return error;\n  }\n};\n\nexport { add, edit, getOne, getAll, getMy, deleteData };","map":null,"metadata":{},"sourceType":"module"}