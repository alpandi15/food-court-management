{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { Button } from 'react-materialize';\nimport { Field, reduxForm, getFormValues, reset } from 'redux-form';\nimport TextInput from 'components/Form/Input';\nimport ImageUploader from 'components/Form/ImageUploader';\nimport { updateProfile } from 'actions/account/accountAction';\nimport { toastify } from 'components/Toast/Toastify';\nimport { GUARD_OWNER } from '../../../constants';\n\nconst validate = ({\n  name,\n  username,\n  phone\n}) => {\n  const error = {\n    username: !username ? '*Required' : username.length < 3 ? 'Username Min 3 Character' : undefined,\n    name: !name ? '*Required' : name.length < 3 ? 'Name Min 3 Character' : undefined,\n    phone: !phone ? '*Required' : !/^[+0-9]+[0-9]+$/.test(phone) ? 'Use phone number format' : phone.length < 10 ? 'Min 10 Character' : phone.length > 15 ? 'Max 15 Character' : undefined\n  };\n  return error;\n};\n\nconst ModalEdit = ({\n  invalid,\n  submitting,\n  handleSubmit,\n  updateProfile,\n  currentItem,\n  resetForm,\n  onCloseModal\n}) => {\n  const onSubmit = async values => {\n    console.log(values);\n\n    const {\n      name,\n      username,\n      phone\n    } = values,\n          other = _objectWithoutProperties(values, [\"name\", \"username\", \"phone\"]);\n\n    if (other && currentItem && currentItem.image && other.image === currentItem.image.url) {\n      other.imageRaw = currentItem.image.raw;\n      other.image = currentItem.image.raw;\n    }\n\n    const result = await updateProfile(_objectSpread({\n      name,\n      username: username !== currentItem.username ? username : undefined,\n      phone\n    }, other), GUARD_OWNER);\n\n    if (result.success) {\n      onCloseModal(false);\n      toastify({\n        type: 'success',\n        message: result.data\n      });\n      resetForm();\n    } else {\n      toastify({\n        type: 'error',\n        message: result.message\n      });\n    }\n\n    console.log('Response Update ', result);\n  };\n\n  return __jsx(React.Fragment, null, __jsx(\"div\", {\n    className: \"modal-content-owner\"\n  }, __jsx(\"div\", {\n    className: \"modal-title\"\n  }, \"Ubah Profile\"), __jsx(\"form\", {\n    onSubmit: handleSubmit(onSubmit),\n    className: \"form-modal\"\n  }, __jsx(\"div\", {\n    className: \"image-user\"\n  }, __jsx(Field, {\n    type: \"file\",\n    contentClass: \"\",\n    className: \"team-logo\",\n    name: \"image\",\n    id: \"image\",\n    label: \"Cover Food Court\",\n    component: ImageUploader,\n    contentStyle: {\n      width: '100%'\n    }\n  })), __jsx(\"div\", null, __jsx(Field, {\n    id: \"name\",\n    name: \"name\",\n    label: \"Nama Food Court\",\n    type: \"text\",\n    active: true,\n    component: TextInput,\n    contentStyle: {\n      width: '100%'\n    }\n  })), __jsx(\"div\", null, __jsx(Field, {\n    id: \"username\",\n    name: \"username\",\n    label: \"Username\",\n    type: \"text\",\n    active: true,\n    component: TextInput,\n    contentStyle: {\n      width: '100%'\n    }\n  })), __jsx(\"div\", null, __jsx(Field, {\n    id: \"phone\",\n    name: \"phone\",\n    label: \"Nomor Telp\",\n    type: \"text\",\n    active: true,\n    component: TextInput,\n    contentStyle: {\n      width: '100%'\n    }\n  })), __jsx(\"div\", {\n    className: \"modal-footer-owner\"\n  }, __jsx(Button, {\n    className: \"waves-effect waves-light red\",\n    modal: \"close\",\n    type: \"button\",\n    node: \"button\",\n    style: {\n      color: 'red !important'\n    },\n    disabled: submitting\n  }, \"Batal\"), __jsx(\"button\", {\n    type: \"submit\",\n    disabled: invalid || submitting,\n    className: \"waves-effect waves-light btn\",\n    node: \"button\"\n  }, \"Simpan\")))));\n};\n\nconst mapStateToProps = state => {\n  const {\n    accountStore: {\n      currentItem\n    }\n  } = state;\n  return {\n    values: getFormValues('FormEditProfilOwner')(state),\n    currentItem,\n    initialValues: {\n      image: currentItem && currentItem.image && currentItem.image.raw ? currentItem.image.url : undefined,\n      name: currentItem && currentItem.name,\n      username: currentItem && currentItem.username,\n      phone: currentItem && currentItem.phone\n    }\n  };\n};\n\nconst mapDispatchToProps = dispatch => ({\n  updateProfile: (data, guard) => dispatch(updateProfile(data, guard)),\n  resetForm: () => dispatch(reset('FormEditProfilOwner'))\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(reduxForm({\n  form: 'FormEditProfilOwner',\n  enableReinitialize: true,\n  validate\n})(ModalEdit));","map":null,"metadata":{},"sourceType":"module"}