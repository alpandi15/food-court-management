{"ast":null,"code":"var __jsx = React.createElement;\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { Field, reduxForm, getFormValues // reset\n} from 'redux-form';\nimport { Link, useHistory } from 'react-router-dom';\nimport TextInput from 'components/Form/Input';\nimport ImageUploader from 'components/Form/ImageUploader';\nimport TextArea from 'components/Form/TextArea';\nimport { getAll } from 'actions/categoryStand/categoryStandAction';\nimport { add } from 'actions/stand/standAction';\nimport SelectionDefault from 'components/Form/Selection';\nimport Layout from 'components/Owner/layout';\nimport { get } from 'services/utils/storage';\nimport { toastify } from 'components/Toast/Toastify';\nimport { GUARD_OWNER, FOODCOURT_SELECTED } from '../../../constants';\nconst MemoLayout = /*#__PURE__*/React.memo(Layout);\n\nconst validate = ({\n  name,\n  username,\n  phone,\n  authname,\n  categoryId,\n  image,\n  email,\n  password,\n  confirm_password\n}) => {\n  const error = {\n    username: !username ? '*Required' : username.length < 3 ? 'Username Min 3 Character' : undefined,\n    name: !name ? '*Required' : name.length < 3 ? 'Name Min 3 Character' : undefined,\n    authname: !authname ? '*Required' : authname.length < 5 ? 'Username Min 5 Character' : undefined,\n    categoryId: !categoryId ? '*Required' : undefined,\n    image: !image ? '*Required' : undefined,\n    phone: !phone ? '*Required' : !/^[+0-9]+[0-9]+$/.test(phone) ? 'Use phone number format' : phone.length < 10 ? 'Min 10 Character' : phone.length > 15 ? 'Max 15 Character' : undefined,\n    email: !email ? '*Required' : !/^[a-zA-Z0-9._-]+@[a-zA-Z0-9.-]+\\.[A-Za-z]{2,4}$/.test(email) ? 'Use email format' : email.length > 50 ? 'Username Max 50 Character' : undefined,\n    password: !password ? '*Required' : password.length < 6 ? 'Password Min 6 Character' : password.length > 50 ? 'Password Max 50 Character' : undefined,\n    confirm_password: !confirm_password ? '*Required' : confirm_password !== password ? 'Password tidak sama' : confirm_password.length > 50 ? 'Password Max 50 Character' : undefined\n  };\n  return error;\n};\n\nconst generateOption = datas => {\n  let options = [{\n    value: '',\n    label: '[PILIH FOOD COURT]'\n  }];\n  datas.map(value => {\n    return options.push({\n      value: String(value.id),\n      id: String(value.id),\n      label: value.name\n    });\n  });\n  return options;\n};\n\nconst FormAdd = ({\n  invalid,\n  submitting,\n  handleSubmit,\n  listCategory,\n  getAll,\n  add\n}) => {\n  const history = useHistory();\n  React.useEffect(() => {\n    const fetch = async () => {\n      const foodCourtId = await get(FOODCOURT_SELECTED);\n      await getAll({\n        foodCourtId,\n        sort: '-createdAt',\n        isAll: true\n      }, GUARD_OWNER);\n    };\n\n    fetch();\n  }, [getAll]);\n\n  const onSubmit = async values => {\n    const foodCourtId = await get(FOODCOURT_SELECTED);\n    const dataSend = {\n      name: values.name,\n      description: values.description,\n      categoryId: values.categoryId,\n      foodCourtId,\n      owner: {\n        image: values.image,\n        name: values.authname,\n        phone: values.phone,\n        email: values.email,\n        username: values.username,\n        password: values.password\n      }\n    };\n    console.log('SEND DATA ', dataSend);\n    const result = await add(dataSend, GUARD_OWNER);\n\n    if (result.success) {\n      toastify({\n        type: 'success',\n        message: result.meta.message\n      });\n      history.goBack();\n    } else {\n      toastify({\n        type: 'error',\n        message: result.message\n      });\n    }\n  };\n\n  return __jsx(MemoLayout, null, __jsx(\"div\", {\n    className: \"owner-content\"\n  }, __jsx(\"div\", {\n    className: \"header-title\"\n  }, __jsx(\"div\", {\n    className: \"header-content\"\n  }, __jsx(\"h5\", null, \"Tambah Stand\"))), __jsx(\"div\", {\n    className: \"content\"\n  }, __jsx(\"form\", {\n    onSubmit: handleSubmit(onSubmit)\n  }, __jsx(\"div\", {\n    className: \"form-stand\"\n  }, __jsx(\"div\", {\n    className: \"row\"\n  }, __jsx(\"div\", {\n    className: \"col s12 m12 l6 stand\"\n  }, __jsx(\"div\", {\n    className: \"title-info\"\n  }, \"Informasi Stand\"), __jsx(Field, {\n    id: \"name\",\n    name: \"name\",\n    label: \"Nama Stand\",\n    type: \"text\",\n    component: TextInput\n  }), __jsx(\"div\", {\n    className: \"input-field col\"\n  }, __jsx(Field, {\n    id: \"categoryId\",\n    name: \"categoryId\",\n    label: \"Pilih Food Court\",\n    options: listCategory,\n    component: SelectionDefault,\n    className: \"select-foodcourt\"\n  }), __jsx(\"div\", {\n    className: \"text-category\"\n  }, \"Belum ada kategori ?\", __jsx(Link, {\n    to: \"/owner/category-stand/create\",\n    className: \"waves-effect\"\n  }, \"Buat Kategori\"))), __jsx(Field, {\n    id: \"phone\",\n    name: \"phone\",\n    label: \"Nomor Telepon\",\n    type: \"text\",\n    component: TextInput\n  }), __jsx(Field, {\n    id: \"description\",\n    name: \"description\",\n    label: \"Deskripsi Stand\",\n    type: \"text\",\n    component: TextArea,\n    dataLength: 200,\n    contentStyle: {\n      width: '100%'\n    }\n  })), __jsx(\"div\", {\n    className: \"col s12 m12 l6\"\n  }, __jsx(\"div\", {\n    className: \"title-info\"\n  }, \"Cover Stand\"), __jsx(\"div\", {\n    className: \"image-user\"\n  }, __jsx(Field, {\n    type: \"file\",\n    contentClass: \"\",\n    className: \"team-logo\",\n    name: \"image\",\n    id: \"image\",\n    label: \"Cover Food Court\",\n    component: ImageUploader,\n    contentStyle: {\n      width: '100%'\n    }\n  })))), __jsx(\"div\", {\n    className: \"row\",\n    style: {\n      marginTop: '90px'\n    }\n  }, __jsx(\"div\", {\n    className: \"col s12 m12 l12 user-stand\"\n  }, __jsx(\"div\", {\n    className: \"title-info\"\n  }, \"Autentikasi User Stand\"), __jsx(Field, {\n    id: \"authname\",\n    name: \"authname\",\n    label: \"Nama Pemilik Stand\",\n    type: \"text\",\n    component: TextInput\n  }), __jsx(Field, {\n    id: \"username\",\n    name: \"username\",\n    label: \"Nama Pengguna Stand\",\n    type: \"text\",\n    component: TextInput\n  }), __jsx(Field, {\n    id: \"email\",\n    name: \"email\",\n    label: \"Alamat Email\",\n    type: \"email\",\n    component: TextInput\n  }), __jsx(Field, {\n    id: \"password\",\n    name: \"password\",\n    label: \"Kata Sandi\",\n    type: \"password\",\n    component: TextInput\n  }), __jsx(Field, {\n    id: \"confirm_password\",\n    name: \"confirm_password\",\n    label: \"Konfirmasi Kata Sandi\",\n    type: \"password\",\n    component: TextInput\n  })))), __jsx(\"button\", {\n    disabled: invalid || submitting,\n    className: \"waves-effect waves-light btn btn-app bg-pimary\"\n  }, \"Masuk\")))));\n};\n\nconst mapStateToProps = state => {\n  const {\n    categoryStandStore\n  } = state;\n  return {\n    values: getFormValues('FormAddStandOwner')(state),\n    listCategory: generateOption(categoryStandStore.list)\n  };\n};\n\nconst mapDispatchToProps = dispatch => ({\n  getAll: (data, guard) => dispatch(getAll(data, guard)),\n  add: (data, guard) => dispatch(add(data, guard))\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(reduxForm({\n  form: 'FormAddStandOwner',\n  validate\n})(FormAdd));","map":null,"metadata":{},"sourceType":"module"}