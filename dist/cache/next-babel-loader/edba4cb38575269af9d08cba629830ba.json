{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { Component } from 'react';\nconst LEFT_PAGE = 'LEFT';\nconst RIGHT_PAGE = 'RIGHT';\n\nconst range = (from, to, step = 1) => {\n  let i = from;\n  const range = [];\n\n  while (i <= to) {\n    range.push(i);\n    i += step;\n  }\n\n  return range;\n};\n\nclass Pagination extends Component {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"gotoPage\", page => {\n      const {\n        onPageChanged = f => f\n      } = this.props;\n      const currentPage = Math.max(0, Math.min(page, this.totalPages));\n      const paginationData = {\n        currentPage,\n        totalPages: this.totalPages,\n        pageLimit: this.pageLimit,\n        totalRecords: this.totalRecords\n      };\n      this.setState({\n        currentPage,\n        showingData: currentPage * this.pageLimit\n      }, () => onPageChanged(paginationData));\n    });\n\n    _defineProperty(this, \"handleClick\", (page, evt) => {\n      evt.preventDefault();\n      this.gotoPage(page);\n    });\n\n    _defineProperty(this, \"handleMoveLeft\", evt => {\n      const {\n        currentPage\n      } = this.state;\n      evt.preventDefault();\n      this.gotoPage(currentPage - this.pageNeighbours * 2 - 1);\n    });\n\n    _defineProperty(this, \"handleMoveRight\", evt => {\n      const {\n        currentPage\n      } = this.state;\n      evt.preventDefault();\n      this.gotoPage(currentPage + this.pageNeighbours * 2 + 1);\n    });\n\n    _defineProperty(this, \"fetchPageNumbers\", () => {\n      const {\n        totalPages\n      } = this;\n      const {\n        currentPage\n      } = this.state;\n      const {\n        pageNeighbours\n      } = this;\n      const totalNumbers = this.pageNeighbours * 2 + 3;\n      const totalBlocks = totalNumbers + 2;\n\n      if (totalPages > totalBlocks) {\n        let pages = [];\n        const leftBound = currentPage - pageNeighbours;\n        const rightBound = currentPage + pageNeighbours;\n        const beforeLastPage = totalPages - 1;\n        const startPage = leftBound > 2 ? leftBound : 2;\n        const endPage = rightBound < beforeLastPage ? rightBound : beforeLastPage;\n        pages = range(startPage, endPage);\n        const pagesCount = pages.length;\n        const singleSpillOffset = totalNumbers - pagesCount - 1;\n        const leftSpill = startPage > 2;\n        const rightSpill = endPage < beforeLastPage;\n        const leftSpillPage = LEFT_PAGE;\n        const rightSpillPage = RIGHT_PAGE;\n\n        if (leftSpill && !rightSpill) {\n          const extraPages = range(startPage - singleSpillOffset, startPage - 1);\n          pages = [leftSpillPage, ...extraPages, ...pages];\n        } else if (!leftSpill && rightSpill) {\n          const extraPages = range(endPage + 1, endPage + singleSpillOffset);\n          pages = [...pages, ...extraPages, rightSpillPage];\n        } else if (leftSpill && rightSpill) {\n          pages = [leftSpillPage, ...pages, rightSpillPage];\n        }\n\n        return [1, ...pages, totalPages];\n      }\n\n      return range(1, totalPages);\n    });\n\n    const {\n      totalRecords = null,\n      pageLimit = 30,\n      pageNeighbours: _pageNeighbours = 0\n    } = props;\n    this.pageLimit = typeof pageLimit === 'number' ? pageLimit : 30;\n    this.totalRecords = typeof totalRecords === 'number' ? totalRecords : 0;\n    this.pageNeighbours = typeof _pageNeighbours === 'number' ? Math.max(0, Math.min(_pageNeighbours, 2)) : 0;\n    this.totalPages = Math.ceil(this.totalRecords / this.pageLimit);\n    this.state = {\n      currentPage: 1,\n      showingData: 1,\n      showingTo: 1\n    };\n  }\n\n  componentDidMount() {\n    const {\n      startPage,\n      pageLimit\n    } = this.props;\n    this.setState({\n      currentPage: startPage,\n      showingData: startPage * pageLimit - (pageLimit - 1),\n      showingTo: startPage * pageLimit <= this.totalRecords ? startPage * pageLimit : this.totalRecords\n    });\n  }\n\n  render() {\n    if (!this.totalRecords) return null;\n    if (this.totalPages === 1) return null;\n    const {\n      currentPage,\n      showingData,\n      showingTo\n    } = this.state;\n    const pages = this.fetchPageNumbers();\n    return __jsx(\"div\", {\n      className: \"pagination-container\"\n    }, __jsx(\"div\", {\n      className: \"info\"\n    }, `Showing ${showingData} to ${showingTo} of ${this.totalRecords} entries`), __jsx(\"div\", {\n      className: \"control\"\n    }, __jsx(\"ul\", {\n      className: \"pagination\"\n    }, pages.map((page, index) => {\n      if (page === LEFT_PAGE) {\n        return __jsx(\"li\", {\n          key: index,\n          className: \"waves-effect\"\n        }, __jsx(\"div\", {\n          className: \"button-page\",\n          \"aria-label\": \"Previous\",\n          onClick: this.handleMoveLeft\n        }, __jsx(\"i\", {\n          className: \"material-icons\"\n        }, \"chevron_left\")));\n      }\n\n      if (page === RIGHT_PAGE) {\n        return __jsx(\"li\", {\n          key: index,\n          className: \"waves-effect\"\n        }, __jsx(\"div\", {\n          className: \"button-page\",\n          \"aria-label\": \"Next\",\n          onClick: this.handleMoveRight\n        }, __jsx(\"i\", {\n          className: \"material-icons\"\n        }, \"chevron_right\")));\n      }\n\n      return __jsx(\"li\", {\n        key: index,\n        className: `waves-effect${currentPage === page ? ' active' : ''}`\n      }, __jsx(\"div\", {\n        style: {\n          cursor: 'pointer'\n        },\n        className: \"button-page\",\n        onClick: e => this.handleClick(page, e)\n      }, page));\n    }))));\n  }\n\n}\n\nexport default Pagination;","map":null,"metadata":{},"sourceType":"module"}