{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { useHistory } from 'react-router-dom';\nimport { Field, reduxForm // reset\n} from 'redux-form';\nimport TextInput from 'components/Form/Input'; // import ImageUploader from 'components/Form/ImageUploader'\n\nimport Layout from 'components/Owner/layout';\nimport CustomeHelmet from 'components/CustomHelmet';\nimport { add } from 'actions/categoryStand/categoryStandAction';\nimport { get } from 'services/utils/storage';\nimport { toastify } from 'components/Toast/Toastify';\nimport { GUARD_OWNER, FOODCOURT_SELECTED } from '../../../constants';\nconst MemoLayout = /*#__PURE__*/React.memo(Layout);\n\nconst validate = ({\n  name\n}) => {\n  const error = {\n    name: !name ? '*Required' : name.length < 3 ? 'Name Min 3 Character' : undefined\n  };\n  return error;\n};\n\nconst FormAdd = ({\n  invalid,\n  submitting,\n  handleSubmit,\n  add\n}) => {\n  const history = useHistory();\n\n  const onSubmit = async values => {\n    const foodCourtId = await get(FOODCOURT_SELECTED);\n    const result = await add(_objectSpread(_objectSpread({}, values), {}, {\n      foodCourtId\n    }), GUARD_OWNER);\n\n    if (result.success) {\n      toastify({\n        type: 'success',\n        message: result.meta.message\n      });\n      history.push('/owner/category-stand');\n    } else {\n      toastify({\n        type: 'error',\n        message: result.message\n      });\n    }\n\n    console.log(values, foodCourtId);\n  };\n\n  return __jsx(MemoLayout, null, __jsx(CustomeHelmet, {\n    title: \"Create Category Stand\"\n  }), __jsx(\"div\", {\n    className: \"owner-content\"\n  }, __jsx(\"div\", {\n    className: \"header-title\"\n  }, __jsx(\"div\", {\n    className: \"header-content\"\n  }, __jsx(\"h5\", null, \"Tambah Kategori Stand\"))), __jsx(\"div\", {\n    className: \"content\"\n  }, __jsx(\"form\", {\n    onSubmit: handleSubmit(onSubmit)\n  }, __jsx(\"div\", {\n    className: \"form-stand\"\n  }, __jsx(\"div\", {\n    className: \"row\"\n  }, __jsx(\"div\", {\n    className: \"col s12 m12 l6 stand\"\n  }, __jsx(\"div\", {\n    className: \"title-info\"\n  }, \"Informasi Kategori\"), __jsx(Field, {\n    id: \"name\",\n    name: \"name\",\n    label: \"Nama Kategori\",\n    type: \"text\",\n    component: TextInput\n  })))), __jsx(\"button\", {\n    disabled: invalid || submitting,\n    className: \"waves-effect waves-light btn btn-app bg-pimary\"\n  }, \"Simpan\")))));\n};\n\nconst mapDispatchToProps = dispatch => ({\n  add: (data, guard) => dispatch(add(data, guard))\n});\n\nexport default connect(null, mapDispatchToProps)(reduxForm({\n  form: 'FormAddCategoryStandOwner',\n  validate\n})(FormAdd));","map":null,"metadata":{},"sourceType":"module"}