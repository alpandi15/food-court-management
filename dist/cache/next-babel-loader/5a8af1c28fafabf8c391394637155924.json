{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { useHistory } from 'react-router-dom';\nimport { Field, reduxForm, getFormValues } from 'redux-form';\nimport ReactMapGL, { GeolocateControl, Marker } from 'react-map-gl';\nimport TextInput from 'components/Form/Input';\nimport TextArea from 'components/Form/TextArea';\nimport ImageUploader from 'components/Form/ImageUploader';\nimport cover from 'static/Image/fcm-cover.jpg';\nimport { config } from 'config';\nimport 'mapbox-gl/dist/mapbox-gl.css';\nimport 'static/Css/owner/owner.css';\nimport { toastify } from 'components/Toast/Toastify';\nimport { formatTimes } from '../../services/utils/masking';\nimport Pin from '../../static/Icon/Pin';\nimport ControlPanel from './control-panel';\nimport { add as createFoodcourt } from '../../actions/foodcourt/foodCourtAction';\n\nconst Register = ({\n  invalid,\n  loading,\n  submitting,\n  handleSubmit,\n  createFoodcourt\n}) => {\n  const history = useHistory();\n  const [viewport, setViewport] = React.useState({\n    width: 400,\n    height: 400,\n    latitude: 3.581399,\n    longitude: 98.685758,\n    zoom: 14\n  });\n  const [marker, setMarker] = React.useState({\n    latitude: 3.581399,\n    longitude: 98.685758\n  });\n  const [events, setEvent] = React.useState({});\n\n  const onSubmit = async values => {\n    console.log('Values ', _objectSpread(_objectSpread({}, values), {}, {\n      location: {\n        lat: viewport.latitude,\n        lng: viewport.longitude\n      }\n    }));\n    const result = await createFoodcourt({\n      name: values.name || '',\n      address: values.address || '',\n      image: values.image || '',\n      description: values.description || '',\n      timeOpen: values.timeOpen || '',\n      timeClose: values.timeClose || '',\n      location: {\n        lat: viewport.latitude,\n        lng: viewport.longitude\n      }\n    });\n\n    if (result.success) {\n      toastify({\n        type: 'success',\n        message: result.meta.message\n      });\n      history.push('/owner');\n    } else {\n      toastify({\n        type: 'error',\n        message: result.message\n      });\n    }\n  };\n\n  React.useEffect(() => {\n    setMarker({\n      latitude: 3.581399,\n      longitude: 98.685758\n    });\n  }, []);\n\n  const _logDragEvent = (name, event) => {\n    setEvent(_objectSpread(_objectSpread({}, events), {}, {\n      [name]: event.lngLat\n    }));\n  };\n\n  const _onMarkerDragStart = event => {\n    _logDragEvent('onDragStart', event);\n  };\n\n  const _onMarkerDrag = event => {\n    _logDragEvent('onDrag', event);\n  };\n\n  const _onMarkerDragEnd = event => {\n    _logDragEvent('onDragEnd', event);\n\n    setMarker({\n      longitude: event.lngLat[0],\n      latitude: event.lngLat[1]\n    });\n  };\n\n  return __jsx(React.Fragment, null, __jsx(\"div\", {\n    className: \"row owner-container\"\n  }, __jsx(\"div\", {\n    className: \"col s12 m12 l7 image-content\"\n  }, __jsx(\"div\", {\n    className: \"information\"\n  }, __jsx(\"img\", {\n    className: \"logo\",\n    src: cover,\n    alt: \"\"\n  }), __jsx(\"div\", {\n    className: \"title\"\n  }, \"Terima Kasih Sudah Bergabung Dengan Kami\"), __jsx(\"p\", null, \"Tim kami akan segera menghubungi kamu dalam waktu 1x24 Jam untuk mengkonfirmasi pendaftaran kamu\"))), __jsx(\"div\", {\n    className: \"col s12 m12 l5 content\"\n  }, __jsx(\"div\", {\n    className: \"form-content\"\n  }, __jsx(\"form\", {\n    onSubmit: handleSubmit(onSubmit)\n  }, __jsx(\"div\", null, __jsx(Field, {\n    id: \"name\",\n    name: \"name\",\n    label: \"Nama Food Court\",\n    type: \"text\",\n    component: TextInput,\n    contentStyle: {\n      width: '100%'\n    }\n  })), __jsx(\"div\", null, __jsx(Field, {\n    id: \"address\",\n    name: \"address\",\n    label: \"Alamat\",\n    type: \"text\",\n    component: TextArea,\n    dataLength: 200,\n    contentStyle: {\n      width: '100%'\n    }\n  })), __jsx(\"div\", {\n    style: {\n      display: 'flex',\n      justifyContent: 'space-between'\n    }\n  }, __jsx(Field, {\n    id: \"timeOpen\",\n    name: \"timeOpen\",\n    label: \"Jam Buka (Format {MM:DD})\",\n    type: \"text\",\n    component: TextInput,\n    format: formatTimes // placeholder=\"12:30\"\n    // normalize={normalizeAmount}\n\n  }), __jsx(Field, {\n    id: \"timeClose\",\n    name: \"timeClose\",\n    label: \"Jam Tutup (Format {MM:DD})\",\n    type: \"text\",\n    component: TextInput,\n    format: formatTimes // placeholder=\"22:00\"\n\n  })), __jsx(\"div\", null, __jsx(Field, {\n    type: \"file\",\n    contentClass: \"\",\n    className: \"team-logo\",\n    name: \"image\",\n    id: \"image\",\n    label: \"Cover Food Court\",\n    component: ImageUploader,\n    contentStyle: {\n      width: '100%'\n    }\n  })), __jsx(\"div\", null, __jsx(\"div\", {\n    className: \"input-field col\",\n    style: {\n      height: '300px',\n      float: 'none'\n    }\n  }, __jsx(ReactMapGL, _extends({}, viewport, {\n    onViewportChange: nextViewport => setViewport(nextViewport),\n    mapboxApiAccessToken: config.mapToken,\n    mapStyle: \"mapbox://styles/mapbox/streets-v11\",\n    width: \"100%\",\n    height: \"300px\",\n    captureClick: true\n  }), __jsx(GeolocateControl, {\n    positionOptions: {\n      enableHighAccuracy: true\n    },\n    trackUserLocation: true\n  }), __jsx(Marker, {\n    longitude: marker.longitude,\n    latitude: marker.latitude,\n    offsetTop: -20,\n    offsetLeft: -10,\n    draggable: true,\n    onDragStart: _onMarkerDragStart,\n    onDrag: _onMarkerDrag,\n    onDragEnd: _onMarkerDragEnd\n  }, __jsx(Pin, {\n    size: 20\n  })), __jsx(ControlPanel, {\n    events: events\n  })))), __jsx(\"div\", {\n    className: \"button-login\"\n  }, __jsx(\"button\", {\n    disabled: invalid || submitting || loading,\n    className: \"waves-effect waves-light btn btn-app bg-pimary\"\n  }, \"Simpan\")))))));\n};\n\nconst mapStateToProps = state => {\n  return {\n    values: getFormValues('FormRegisterOwner')(state)\n  };\n};\n\nconst mapDispatchToProps = dispatch => ({\n  createFoodcourt: data => dispatch(createFoodcourt(data))\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(reduxForm({\n  form: 'FormRegisterOwner' // validate\n\n})(Register));","map":null,"metadata":{},"sourceType":"module"}