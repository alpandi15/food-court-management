{"ast":null,"code":"import _regeneratorRuntime from \"/home/pandi95/Projects/React/blog-frontend/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/home/pandi95/Projects/React/blog-frontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { apiUpload } from \"../../services/utils/imageService\";\nimport { FETCH_IMAGE, FAILED_IMAGE, SUCCESS_IMAGE } from \"../types\";\n\nvar fetch = function fetch() {\n  return {\n    type: FETCH_IMAGE\n  };\n};\n\nvar success = function success(data, meta) {\n  return {\n    type: SUCCESS_IMAGE,\n    payload: {\n      data: data,\n      meta: meta\n    }\n  };\n};\n\nvar failed = function failed(error) {\n  return {\n    type: FAILED_IMAGE,\n    payload: {\n      errorMessage: typeof error === 'object' ? error.message : error\n    }\n  };\n};\n/**\n *\n * @param {String} type\n * @param {String} image\n */\n\n\nvar uploadImage = function uploadImage() {\n  var type = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'product';\n  var image = arguments.length > 1 ? arguments[1] : undefined;\n  return /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(dispatch) {\n      var formData, response;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.prev = 0;\n              dispatch(fetch());\n\n              if (type) {\n                _context.next = 4;\n                break;\n              }\n\n              return _context.abrupt(\"return\", dispatch(failed('Type is Required')));\n\n            case 4:\n              if (image) {\n                _context.next = 6;\n                break;\n              }\n\n              return _context.abrupt(\"return\", dispatch(failed('Image is Required')));\n\n            case 6:\n              formData = new FormData();\n              formData.append('file', image);\n              _context.next = 10;\n              return apiUpload(type, formData);\n\n            case 10:\n              response = _context.sent;\n\n              if (!response.success) {\n                _context.next = 14;\n                break;\n              }\n\n              dispatch(success(response.data, response.meta));\n              return _context.abrupt(\"return\", response.data.filename);\n\n            case 14:\n              dispatch(failed(response));\n              throw response;\n\n            case 18:\n              _context.prev = 18;\n              _context.t0 = _context[\"catch\"](0);\n              dispatch(failed(_context.t0));\n              throw _context.t0;\n\n            case 22:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[0, 18]]);\n    }));\n\n    return function (_x) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n};\n\nexport { uploadImage };","map":null,"metadata":{},"sourceType":"module"}