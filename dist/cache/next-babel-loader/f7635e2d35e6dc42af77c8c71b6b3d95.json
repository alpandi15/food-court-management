{"ast":null,"code":"import _extends from \"/home/pandi95/Projects/React/blog-frontend/node_modules/@babel/runtime/helpers/esm/extends\";\nimport _regeneratorRuntime from \"/home/pandi95/Projects/React/blog-frontend/node_modules/@babel/runtime/regenerator\";\nimport _defineProperty from \"/home/pandi95/Projects/React/blog-frontend/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _asyncToGenerator from \"/home/pandi95/Projects/React/blog-frontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"/home/pandi95/Projects/React/blog-frontend/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { Field, reduxForm, getFormValues } from 'redux-form';\nimport ReactMapGL, { GeolocateControl, Marker } from 'react-map-gl';\nimport TextInput from 'components/Form/Input';\nimport TextArea from 'components/Form/TextArea';\nimport ImageUploader from 'components/Form/ImageUploader';\nimport { config } from 'config';\nimport 'mapbox-gl/dist/mapbox-gl.css';\nimport 'static/Css/owner/owner.css';\nimport { toastify } from 'components/Toast/Toastify';\nimport { formatTimes } from 'services/utils/masking';\nimport Pin from 'static/Icon/Pin';\nimport { getOne as _getOne, edit as _edit } from 'actions/foodcourt/foodCourtAction';\nimport { get } from 'services/utils/storage';\nimport { FOODCOURT_SELECTED } from 'constants/index';\nimport ControlPanel from '../control-panel';\n\nvar StandSetting = function StandSetting(_ref) {\n  var invalid = _ref.invalid,\n      loading = _ref.loading,\n      submitting = _ref.submitting,\n      currentItem = _ref.currentItem,\n      handleSubmit = _ref.handleSubmit,\n      edit = _ref.edit,\n      getOne = _ref.getOne;\n\n  var _React$useState = React.useState({\n    width: 400,\n    height: 400,\n    latitude: 3.581399,\n    longitude: 98.685758,\n    zoom: 14\n  }),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      viewport = _React$useState2[0],\n      setViewport = _React$useState2[1];\n\n  var _React$useState3 = React.useState({}),\n      _React$useState4 = _slicedToArray(_React$useState3, 2),\n      marker = _React$useState4[0],\n      setMarker = _React$useState4[1];\n\n  var _React$useState5 = React.useState({}),\n      _React$useState6 = _slicedToArray(_React$useState5, 2),\n      events = _React$useState6[0],\n      setEvent = _React$useState6[1];\n\n  var onSubmit = /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(values) {\n      var result;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              if (values && currentItem && currentItem.image && values.image === currentItem.image.url) {\n                values.imageRaw = currentItem.image.raw;\n                values.image = currentItem.image.raw;\n              }\n\n              if (!(currentItem && currentItem.id)) {\n                _context.next = 7;\n                break;\n              }\n\n              _context.next = 4;\n              return edit(currentItem.id, _objectSpread(_objectSpread({}, values), {}, {\n                location: {\n                  lat: viewport.latitude,\n                  lng: viewport.longitude\n                }\n              }));\n\n            case 4:\n              result = _context.sent;\n\n              if (result.success) {\n                toastify({\n                  type: 'success',\n                  message: result.meta.message\n                });\n              } else {\n                toastify({\n                  type: 'error',\n                  message: result.message\n                });\n              }\n\n              console.log('Result ', result);\n\n            case 7:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function onSubmit(_x) {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n\n  React.useEffect(function () {\n    var fetch = /*#__PURE__*/function () {\n      var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n        var storageId;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return get(FOODCOURT_SELECTED);\n\n              case 2:\n                storageId = _context2.sent;\n\n                if (!storageId) {\n                  _context2.next = 6;\n                  break;\n                }\n\n                _context2.next = 6;\n                return getOne(storageId);\n\n              case 6:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }));\n\n      return function fetch() {\n        return _ref3.apply(this, arguments);\n      };\n    }();\n\n    fetch();\n  }, []);\n  React.useEffect(function () {\n    if (currentItem && currentItem.location) {\n      setMarker({\n        latitude: currentItem.location.lat,\n        longitude: currentItem.location.lng\n      });\n      setViewport(_objectSpread(_objectSpread({}, viewport), {}, {\n        latitude: currentItem.location.lat,\n        longitude: currentItem.location.lng\n      }));\n    }\n  }, [currentItem]);\n\n  var _logDragEvent = function _logDragEvent(name, event) {\n    setEvent(_objectSpread(_objectSpread({}, events), {}, _defineProperty({}, name, event.lngLat)));\n  };\n\n  var _onMarkerDragStart = function _onMarkerDragStart(event) {\n    _logDragEvent('onDragStart', event);\n  };\n\n  var _onMarkerDrag = function _onMarkerDrag(event) {\n    _logDragEvent('onDrag', event);\n  };\n\n  var _onMarkerDragEnd = function _onMarkerDragEnd(event) {\n    _logDragEvent('onDragEnd', event);\n\n    setMarker({\n      longitude: event.lngLat[0],\n      latitude: event.lngLat[1]\n    });\n  };\n\n  return __jsx(React.Fragment, null, __jsx(\"div\", {\n    className: \"content\"\n  }, __jsx(\"div\", {\n    className: \"foodcourt-setting\"\n  }, __jsx(\"div\", {\n    className: \"section\"\n  }, __jsx(\"span\", null, \"Food Court Setting\")), __jsx(\"form\", {\n    onSubmit: handleSubmit(onSubmit),\n    className: \"form-stand\"\n  }, __jsx(\"div\", null, __jsx(Field, {\n    id: \"name\",\n    name: \"name\",\n    label: \"Nama Food Court\",\n    type: \"text\",\n    component: TextInput,\n    contentStyle: {\n      width: '100%'\n    },\n    active: true\n  })), __jsx(\"div\", null, __jsx(Field, {\n    id: \"address\",\n    name: \"address\",\n    label: \"Alamat\",\n    type: \"text\",\n    component: TextArea,\n    dataLength: 200,\n    contentStyle: {\n      width: '100%'\n    },\n    active: true\n  })), __jsx(\"div\", {\n    style: {\n      display: 'flex',\n      justifyContent: 'space-between'\n    }\n  }, __jsx(Field, {\n    id: \"timeOpen\",\n    name: \"timeOpen\",\n    label: \"Jam Buka (Format {MM:DD})\",\n    type: \"text\",\n    component: TextInput,\n    format: formatTimes,\n    active: true // placeholder=\"12:30\"\n    // normalize={normalizeAmount}\n\n  }), __jsx(Field, {\n    id: \"timeClose\",\n    name: \"timeClose\",\n    label: \"Jam Tutup (Format {MM:DD})\",\n    type: \"text\",\n    component: TextInput,\n    format: formatTimes // placeholder=\"22:00\"\n    ,\n    active: true\n  })), __jsx(\"div\", null, __jsx(Field, {\n    type: \"file\",\n    contentClass: \"\",\n    className: \"team-logo\",\n    name: \"image\",\n    id: \"image\",\n    label: \"Cover Food Court\",\n    component: ImageUploader,\n    contentStyle: {\n      width: '100%'\n    },\n    active: true\n  })), __jsx(\"div\", null, __jsx(\"div\", {\n    className: \"input-field col\",\n    style: {\n      height: '300px',\n      \"float\": 'none'\n    }\n  }, __jsx(ReactMapGL, _extends({}, viewport, {\n    onViewportChange: function onViewportChange(nextViewport) {\n      return setViewport(nextViewport);\n    },\n    mapboxApiAccessToken: config.mapToken,\n    mapStyle: \"mapbox://styles/mapbox/streets-v11\",\n    width: \"100%\",\n    height: \"300px\",\n    captureClick: true\n  }), __jsx(GeolocateControl, {\n    positionOptions: {\n      enableHighAccuracy: true\n    },\n    trackUserLocation: true\n  }), __jsx(Marker, {\n    longitude: marker.longitude,\n    latitude: marker.latitude,\n    offsetTop: -20,\n    offsetLeft: -10,\n    draggable: true,\n    onDragStart: _onMarkerDragStart,\n    onDrag: _onMarkerDrag,\n    onDragEnd: _onMarkerDragEnd\n  }, __jsx(Pin, {\n    size: 20\n  })), __jsx(ControlPanel, {\n    events: events\n  })))), __jsx(\"div\", null, __jsx(Field, {\n    id: \"description\",\n    name: \"description\",\n    label: \"Deskripsi Food Coourt\",\n    type: \"text\",\n    component: TextArea,\n    dataLength: 500,\n    contentStyle: {\n      width: '100%'\n    },\n    active: true\n  })), __jsx(\"div\", {\n    className: \"button-login\"\n  }, __jsx(\"button\", {\n    disabled: invalid || submitting || loading,\n    className: \"waves-effect waves-light btn btn-app bg-pimary\"\n  }, \"Simpan\"))))));\n};\n\nvar mapStateToProps = function mapStateToProps(state) {\n  var currentItem = state.foodCourt.currentItem;\n  return {\n    values: getFormValues('EditFormStand')(state),\n    currentItem: currentItem,\n    initialValues: {\n      image: currentItem && currentItem.image && currentItem.image.raw ? currentItem.image.url : undefined,\n      name: currentItem && currentItem.name,\n      address: currentItem && currentItem.address,\n      timeOpen: currentItem && currentItem.timeOpen,\n      timeClose: currentItem && currentItem.timeClose,\n      description: currentItem && currentItem.description\n    }\n  };\n};\n\nvar mapDispatchToProps = function mapDispatchToProps(dispatch) {\n  return {\n    getOne: function getOne(uuid) {\n      return dispatch(_getOne(uuid));\n    },\n    edit: function edit(id, data, guard) {\n      return dispatch(_edit(id, data, guard));\n    }\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(reduxForm({\n  form: 'EditFormStand',\n  enableReinitialize: true // validate\n\n})(StandSetting));","map":null,"metadata":{},"sourceType":"module"}